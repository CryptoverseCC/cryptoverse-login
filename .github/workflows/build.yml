name: Built & Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # Needs to match "domain" value in values.ci.yaml
  DOMAIN_LOGIN: login.cryptoverse.local
  DOMAIN_DEMO_APP: login-demo.cryptoverse.local
  PROJECT: cryptoverse-login
  REGISTRY: registry.digitalocean.com/cryptoverse
  ASSETS_PATH: /tmp/assets/

jobs:
  build-gateway:
    runs-on: ubuntu-latest
    environment: CI
    steps:
      - uses: actions/checkout@v2
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Log in to DO Container Registry
        run: doctl registry login --expiry-seconds 1200
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: login/gateway
          push: true
          tags: "${{ env.REGISTRY }}/${{ env.PROJECT }}/gateway:${{ github.sha }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max
  build-login:
    runs-on: ubuntu-latest
    environment: CI
    steps:
      - uses: actions/checkout@v2
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Log in to DO Container Registry
        run: doctl registry login --expiry-seconds 1200
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: login/login
          push: true
          tags: "${{ env.REGISTRY }}/${{ env.PROJECT }}/login:${{ github.sha }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max
  build-wrapper:
    runs-on: ubuntu-latest
    environment: CI
    steps:
      - uses: actions/checkout@v2
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Log in to DO Container Registry
        run: doctl registry login --expiry-seconds 1200
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: login/wrapper
          push: true
          tags: "${{ env.REGISTRY }}/${{ env.PROJECT }}/wrapper:${{ github.sha }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max
  build-demo:
    runs-on: ubuntu-latest
    environment: CI
    steps:
      - uses: actions/checkout@v2
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Log in to DO Container Registry
        run: doctl registry login --expiry-seconds 1200
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: tests/cryptoverse-login-demo/demo
          push: true
          tags: "${{ env.REGISTRY }}/${{ env.PROJECT }}/demo-python-django:${{ github.sha }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max
  test:
    runs-on: ubuntu-latest
    environment: CI
    needs:
      - build-gateway
      - build-login
      - build-wrapper
      - build-demo
    steps:
      - uses: actions/checkout@v2
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - uses: balchua/microk8s-actions@v0.3.1
        with:
          channel: "latest/stable"
          addons: '["dns", "ingress"]'
      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.4.0

      #####################
      # Cryptoverse Login #
      #####################
      - name: Create Namespace and log in to DO Container Registry
        run: |
          kubectl create namespace cryptoverse-login-${{ github.sha }}
          doctl registry login --expiry-seconds 1200
          doctl registry kubernetes-manifest --namespace cryptoverse-login-${{ github.sha }} | kubectl apply -f -
      - name: Resolve domain to localhost #TODO resolve to cluster ip
        run: |
          echo "127.0.0.1 ${DOMAIN_LOGIN}" | sudo tee -a /etc/hosts
      - name: Certs
        run: |
          openssl req -x509 -nodes -days 1 -newkey rsa:2048 \
            -out local.crt \
            -keyout local.key \
            -subj "/CN=${DOMAIN_LOGIN}/O=Cryptoverse OU"
          sudo cp local.crt /etc/ssl/certs/
          sudo update-ca-certificates
          kubectl create secret tls cryptoverse-login \
            --namespace cryptoverse-login-${{ github.sha }} \
            --key local.key \
            --cert local.crt
          sleep 10s
      - name: Install Cryptoverse Login
        run: |
          helm upgrade --install --wait --timeout 10m \
            cryptoverse-login \
            ./charts/login/ \
            --namespace cryptoverse-login-${{ github.sha }} \
            -f ./charts/login/values.ci.yaml \
            --set version=${{ github.sha }}
      - name: Verify connectivity
        run: |
          curl https://${DOMAIN_LOGIN}/.well-known/openid-configuration -vk

      ########
      # Demo #
      ########
      - name: Create Namespace and log in to DO Container Registry
        run: |
          kubectl create namespace cryptoverse-login-demo-${{ github.sha }}
          doctl registry login --expiry-seconds 1200
          doctl registry kubernetes-manifest --namespace cryptoverse-login-demo-${{ github.sha }} | kubectl apply -f -
      - name: Resolve demo app domain to localhost #TODO resolve to cluster ip
        run: |
          echo "127.0.0.1 ${DOMAIN_DEMO_APP}" | sudo tee -a /etc/hosts
      - name: Certs
        run: |
          openssl req -x509 -nodes -days 1 -newkey rsa:2048 \
            -out local-demo.crt \
            -keyout local-demo.key \
            -subj "/CN=${DOMAIN_DEMO_APP}/O=Cryptoverse OU"
          sudo cp local-demo.crt /etc/ssl/certs/
          sudo update-ca-certificates
          kubectl create secret tls login-demo-tls \
            --namespace cryptoverse-login-demo-${{ github.sha }} \
            --key local-demo.key \
            --cert local-demo.crt
          sleep 2s
      - name: Install Cryptoverse Login Demo App (Python+Django)
        run: |
          helm upgrade --install --wait --timeout 10m \
            cryptoverse-login-demo \
            ./tests/cryptoverse-login-demo/charts/demo/ \
            --namespace cryptoverse-login-demo-${{ github.sha }} \
            -f ./tests/cryptoverse-login-demo/charts/demo/values.ci.yaml \
            --set version=${{ github.sha }} \
            --set tlsSecretName=login-demo-tls \
            --set demo.oidc.jwksEndpoint=http://cryptoverse-login-hydra-public.cryptoverse-login-${{ github.sha }}:4444/.well-known/jwks.json \
            --set demo.oidc.tokenEndpoint=http://cryptoverse-login-hydra-public.cryptoverse-login-${{ github.sha }}:4444/oauth2/token \
            --set demo.oidc.userEndpoint=http://cryptoverse-login-hydra-public.cryptoverse-login-${{ github.sha }}:4444/userinfo
        #   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        #   Using cryptoverse-login-hydra-public.ns instead of login.cryptoverse.local
        #   is a workaround for the demo app being in the same cluster
        #   and not being able to resolve login.cryptoverse.local from inside
        #   since it's defined in /etc/hosts on host machine
      - name: Verify connectivity
        run: |
          curl https://${DOMAIN_DEMO_APP}/ -vk

      # TODO: Test dynamic client registration
      #######################
      # Test using Demo App #
      #######################
      - name: Selenium Tests
        run: |
          mkdir -p ${ASSETS_PATH}
          cd tests
          pip install -r requirements.txt
          pytest test_full.py --junitxml=${ASSETS_PATH}/junit.xml --verbose --log-level=INFO --capture=no --log-cli-level=INFO
      - name: Logs
        if: always()
        run: |
          kubectl get pods --namespace cryptoverse-login-${{ github.sha }} -o wide --show-labels
          kubectl get services --namespace cryptoverse-login-${{ github.sha }} -o wide --show-labels
          kubectl logs --namespace cryptoverse-login-${{ github.sha }} --tail 1000 -l app=cryptoverse-login-gateway
          kubectl logs --namespace cryptoverse-login-${{ github.sha }} --tail 1000 -l app=cryptoverse-login-login
          kubectl logs --namespace cryptoverse-login-${{ github.sha }} --tail 1000 -l app=cryptoverse-login-wrapper
          kubectl logs --namespace cryptoverse-login-${{ github.sha }} --tail 1000 -l app.kubernetes.io/name=hydra
          kubectl get pods --namespace cryptoverse-login-demo-${{ github.sha }} -o wide --show-labels
          kubectl logs --namespace cryptoverse-login-demo-${{ github.sha }} --tail 1000 -l app=cryptoverse-login-demo
      - name: Microk8s - Gather debug info
        if: always()
        run: |
          cd ${ASSETS_PATH}
          microk8s inspect
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: assets
          path: /tmp/assets/
